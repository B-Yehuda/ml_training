[Redshift_Data]
# query to fetch data
query = select deployment_id,

       -- channel stat
       -- Note: Currently, the following features cannot be used because they will be missing in the inference phase. To solve with the DEs.
       --  number_of_channels::integer,
       --  channels_streamed_30d::integer,
       --  channels_streamed_60d::integer,
       --  channels_streamed_90d::integer,
       --  cnt_streams_30d::integer,
       --  cnt_streams_60d::integer,
       --  cnt_streams_90d::integer,
       --  channels_login_30d::integer,
       --  channels_login_60d::integer,
       --  channels_login_90d::integer,
       --  cnt_logins_30d::integer,
       --  cnt_logins_60d::integer,
       --  cnt_logins_90d::integer,
           days_between_last_video_and_deployment::float,
           days_between_last_short_and_deployment::float,

           -- subs
           cnt_subscribers::integer,
           avv::float,

           -- video category
           most_viewed_category,
           cnt_viewed_categories::integer,

           -- videos stats
           videos_30d::integer,
           videos_60d::integer,
           videos_90d::integer,
           videos_frequency_30d::integer,
           videos_frequency_60d::integer,
           videos_frequency_90d::float,
           videos_total_mins_time_l10v::float,
           videos_total_mins_time_30d::float,
           videos_total_mins_time_60d::float,
           videos_total_mins_time_90d::float,
           videos_avg_mins_time_l10v::float,
           videos_avg_mins_time_30d::float,
           videos_avg_mins_time_60d::float,
           videos_avg_mins_time_90d::float,
           videos_views_l10v::integer,
           videos_views_30d::integer,
           videos_views_60d::integer,
           videos_views_90d::integer,
           videos_avg_views_l10v::float,
           videos_avg_views_30d::float,
           videos_avg_views_60d::float,
           videos_avg_views_90d::float,

           -- videos engagement
           videos_avv_30d::float,
           videos_avv_60d::float,
           videos_avv_90d::float,
           videos_avg_engagement_rate_30d::float,
           videos_avg_engagement_rate_60d::float,
           videos_avg_engagement_rate_90d::float,
           videos_avg_comment_share_30d::float,
           videos_avg_comment_share_60d::float,
           videos_avg_comment_share_90d::float,
           videos_avg_like_share_30d::float,
           videos_avg_like_share_60d::float,
           videos_avg_like_share_90d::float,
           -- videos_avg_dislike_share_30d::float,
           -- videos_avg_dislike_share_60d::float,
           -- videos_avg_dislike_share_90d::float,

           -- videos comments
           videos_l10v::integer,
           commenters_per_video_l10v::float,
           comments_per_video_l10v::float,
           repeating_commenters_per_video_l10v::float,
           repeating_comments_per_video_l10v::float,
           share_repeating_commenters_per_video_l10v::float,
           share_repeating_commentes_per_video_l10v::float,

           -- shorts stats
           shorts_30d::integer,
           shorts_60d::integer,
           shorts_90d::integer,
           shorts_frequency_30d::float,
           shorts_frequency_60d::float,
           shorts_frequency_90d::float,
           shorts_total_mins_time_l10v::float,
           shorts_total_mins_time_30d::float,
           shorts_total_mins_time_60d::float,
           shorts_total_mins_time_90d::float,
           shorts_avg_mins_time_l10v::float,
           shorts_avg_mins_time_30d::float,
           shorts_avg_mins_time_60d::float,
           shorts_avg_mins_time_90d::float,
           shorts_views_l10v::integer,
           shorts_views_30d::integer,
           shorts_views_60d::integer,
           shorts_views_90d::integer,
           shorts_avg_views_l10v::float,
           shorts_avg_views_30d::float,
           shorts_avg_views_60d::float,
           shorts_avg_views_90d::float,

           -- shorts engagement
           shorts_avv_30d::float,
           shorts_avv_60d::float,
           shorts_avv_90d::float,
           shorts_avg_engagement_rate_30d::float,
           shorts_avg_engagement_rate_60d::float,
           shorts_avg_engagement_rate_90d::float,
           shorts_avg_comment_share_30d::float,
           shorts_avg_comment_share_60d::float,
           shorts_avg_comment_share_90d::float,
           shorts_avg_like_share_30d::float,
           shorts_avg_like_share_60d::float,
           shorts_avg_like_share_90d::float,
           -- shorts_avg_dislike_share_30d::float,
           -- shorts_avg_dislike_share_60d::float,
           -- shorts_avg_dislike_share_90d::float,

           -- shorts comments
           shorts_l10v::integer,
           commenters_per_short_l10v::float,
           comments_per_short_l10v::float,
           repeating_commenters_per_short_l10v::float,
           repeating_comments_per_short_l10v::float,
           share_repeating_commenters_per_short_l10v::float,
           share_repeating_commentes_per_short_l10v::float,

           -- binning features
           1.00 * videos_30d / nullif((videos_30d + shorts_30d), 0)::float as videos_pct_of_total_videos_shorts_30d,
           1.00 * videos_60d / nullif((videos_60d + shorts_60d), 0)::float as videos_pct_of_total_videos_shorts_60d,
           1.00 * videos_90d / nullif((videos_90d + shorts_90d), 0)::float as videos_pct_of_total_videos_shorts_90d,

           -- target
           -- conversions::integer,
           -- is_won
           is_won_with_conversions
        from dev_yehuda.youtube_hf_model_training
        where is_won=1


[Data_Processing]
# outliers to be removed
outliers_to_be_removed = {'days_between_last_video_and_deployment': {'threshold': 365, 'is_above': True}}

# create buckets of categorical features
features_to_bucket = {}

# columns to drop
cols_to_drop = ['deployment_id']

# numeric features to convert to categorical
numeric_to_category = []

# Choose 1 of the following options: YES or NO (split data to 3 parts (train, validation, test) OR 2 parts (train, test))
is_train_val_test = NO

# target column
target = 'is_won_with_conversions'


[Model_Parameters]
# Choose the following type: CLASSIFIER
model_type = CLASSIFIER

# model parameters
param = {"seed": 42,  # used to generate the folds
        "tree_method": "gpu_hist",  # speed up processing by using gpu power
        "n_estimators": 1000,  # number of trees
        "early_stopping_rounds":25  # overfitting prevention, stop early if no improvement in learning
        }

# Choose 1 of the following options: binary:logistic
objective = binary:logistic

# Choose 1 of the following options: aucpr (w.r.t objective)
eval_metric = aucpr

# Choose 1 of the following options: YES or NO
is_cross_validation = YES

# number of tuning trials
n_trials = 5000


[Scoring_Functions]
# Choose 1 of the following classification scoring functions: ['AveragePrecisionScore', 'F1Score', 'RecallScore', 'PrecisionScore']
classifier_scoring_functions = ['AveragePrecisionScore']
# FYI: PrecisionScore:beta=0, RecallScore:beta=+inf, F_beta:beta=2.0

# filters
precision_filter = 0.1


[GCS]
# ID of GCS bucket
bucket = acceptance-rate-prediction-streamelements-1337

# Folder path in GCS bucket
folder_path_of_model_file = rhea/training/


[Dataset]
# File name
filename = youtube_conversions_model_training_dataset

# Choose 1 of the following locations: LOCAL or REDSHIFT or GCS or GCS_VIA_LOCAL
location = REDSHIFT


[Locations]
# Choose 1 of the following locations: LOCAL or GCS or GCS_VIA_LOCAL
location_for_writing_model = GCS


[Pipeline]
# Pipeline name
pipeline_name = YouTube_Conversions

# Choose the following pipeline: CLASSIFIER
pipeline = CLASSIFIER